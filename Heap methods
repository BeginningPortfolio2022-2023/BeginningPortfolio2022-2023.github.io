Complexity: O(log n) because adding an element
may require traversing the height of the heap,
which is proportional to log n, where n is the number of elements in the heap

public void add(int element) {
        if (size == capacity) {
            // Resize the array or throw an exception
            // For simplicity, assume the array is resized if capacity is reached
            capacity *= 2;
            heap = Arrays.copyOf(heap, capacity);
        }
        heap[size] = element;
        heapifyUp(size);
        size++;
    }
--------------------------------------------------------------------
Complexity: O(log n) because removing the root element
and rearranging the remaining elements may require traversing
the height of the heap, which is proportional to log n.

public int remove() {
        if (isEmpty()) {
            throw new IllegalStateException("Heap is empty");
        }
        int removedElement = heap[0];
        heap[0] = heap[size - 1];
        size--;
        heapifyDown(0);
        return removedElement;
    }
---------------------------------------------------------------------------
If searching is required, it would involve traversing
the elements of the heap, which would have a complexity of O(n)
in the worst case, where n is the number of elements in the heap.

public boolean search(int element) {
        for (int i = 0; i < size; i++) {
            if (heap[i] == element) {
                return true;
            }
        }
        return false;
    }
-----------------------------------------------------------------------------
Complexity: O(log n) for both removing and adding the element,
resulting in a total complexity of O(log n) for the modification operation

public void modify(int index, int newValue) {
        if (index < 0 || index >= size) {
            throw new IllegalArgumentException("Index is out of bounds");
        }
        heap[index] = newValue;
        heapifyUp(index);
        heapifyDown(index);
    }
